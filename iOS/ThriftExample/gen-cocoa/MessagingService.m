/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "MessagingService.h"

@implementation User

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id name: (NSString *) name
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Message

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBody: (NSString *) body sender: (User *) sender timestamp: (int32_t) timestamp
{
  self = [super init];
  __body = [body retain_stub];
  __body_isset = YES;
  __sender = [sender retain_stub];
  __sender_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"sender"])
  {
    __sender = [[decoder decodeObjectForKey: @"sender"] retain_stub];
    __sender_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeInt32ForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__sender_isset)
  {
    [encoder encodeObject: __sender forKey: @"sender"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeInt32: __timestamp forKey: @"timestamp"];
  }
}

- (void) dealloc
{
  [__body release_stub];
  [__sender release_stub];
  [super dealloc_stub];
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (User *) sender {
  return [[__sender retain_stub] autorelease_stub];
}

- (void) setSender: (User *) sender {
  [sender retain_stub];
  [__sender release_stub];
  __sender = sender;
  __sender_isset = YES;
}

- (BOOL) senderIsSet {
  return __sender_isset;
}

- (void) unsetSender {
  [__sender release_stub];
  __sender = nil;
  __sender_isset = NO;
}

- (int32_t) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (int32_t) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setSender: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Message"];
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sender_isset) {
    if (__sender != nil) {
      [outProtocol writeFieldBeginWithName: @"sender" type: TType_STRUCT fieldID: 2];
      [__sender write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __timestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__body_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'body' is not set."];
  }
  if (!__sender_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sender' is not set."];
  }
  if (!__timestamp_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'timestamp' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Message("];
  [ms appendString: @"body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"%@", __sender];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%i", __timestamp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserCredentials

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (NSString *) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserCredentials"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__token_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'token' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserCredentials("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NewMessage

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSender: (UserCredentials *) sender body: (NSString *) body targetUserId: (int32_t) targetUserId
{
  self = [super init];
  __sender = [sender retain_stub];
  __sender_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  __targetUserId = targetUserId;
  __targetUserId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sender"])
  {
    __sender = [[decoder decodeObjectForKey: @"sender"] retain_stub];
    __sender_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  if ([decoder containsValueForKey: @"targetUserId"])
  {
    __targetUserId = [decoder decodeInt32ForKey: @"targetUserId"];
    __targetUserId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sender_isset)
  {
    [encoder encodeObject: __sender forKey: @"sender"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
  if (__targetUserId_isset)
  {
    [encoder encodeInt32: __targetUserId forKey: @"targetUserId"];
  }
}

- (void) dealloc
{
  [__sender release_stub];
  [__body release_stub];
  [super dealloc_stub];
}

- (UserCredentials *) sender {
  return [[__sender retain_stub] autorelease_stub];
}

- (void) setSender: (UserCredentials *) sender {
  [sender retain_stub];
  [__sender release_stub];
  __sender = sender;
  __sender_isset = YES;
}

- (BOOL) senderIsSet {
  return __sender_isset;
}

- (void) unsetSender {
  [__sender release_stub];
  __sender = nil;
  __sender_isset = NO;
}

- (NSString *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSString *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (int32_t) targetUserId {
  return __targetUserId;
}

- (void) setTargetUserId: (int32_t) targetUserId {
  __targetUserId = targetUserId;
  __targetUserId_isset = YES;
}

- (BOOL) targetUserIdIsSet {
  return __targetUserId_isset;
}

- (void) unsetTargetUserId {
  __targetUserId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UserCredentials *fieldValue = [[UserCredentials alloc] init];
          [fieldValue read: inProtocol];
          [self setSender: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTargetUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NewMessage"];
  if (__sender_isset) {
    if (__sender != nil) {
      [outProtocol writeFieldBeginWithName: @"sender" type: TType_STRUCT fieldID: 1];
      [__sender write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __body];
      [outProtocol writeFieldEnd];
    }
  }
  if (__targetUserId_isset) {
    [outProtocol writeFieldBeginWithName: @"targetUserId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __targetUserId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__sender_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sender' is not set."];
  }
  if (!__body_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'body' is not set."];
  }
  if (!__targetUserId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'targetUserId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NewMessage("];
  [ms appendString: @"sender:"];
  [ms appendFormat: @"%@", __sender];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @",targetUserId:"];
  [ms appendFormat: @"%i", __targetUserId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation MessagingServiceConstants
+ (void) initialize {
}
@end

@interface fetchMessages_args : NSObject <TBase, NSCoding> {
  UserCredentials * __credentials;

  BOOL __credentials_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) UserCredentials * credentials;
#endif

- (id) init;
- (id) initWithCredentials: (UserCredentials *) credentials;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UserCredentials *) credentials;
- (void) setCredentials: (UserCredentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

@end

@implementation fetchMessages_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCredentials: (UserCredentials *) credentials
{
  self = [super init];
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
}

- (void) dealloc
{
  [__credentials release_stub];
  [super dealloc_stub];
}

- (UserCredentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (UserCredentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UserCredentials *fieldValue = [[UserCredentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"fetchMessages_args"];
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 1];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"fetchMessages_args("];
  [ms appendString: @"credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface FetchMessages_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation FetchMessages_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Message *_elem2 = [[Message alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FetchMessages_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FetchMessages_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface postMessage_args : NSObject <TBase, NSCoding> {
  NewMessage * __message;

  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=message, setter=setMessage:) NewMessage * message;
#endif

- (id) init;
- (id) initWithMessage: (NewMessage *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NewMessage *) message;
- (void) setMessage: (NewMessage *) message;
#endif
- (BOOL) messageIsSet;

@end

@implementation postMessage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMessage: (NewMessage *) message
{
  self = [super init];
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (NewMessage *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NewMessage *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          NewMessage *fieldValue = [[NewMessage alloc] init];
          [fieldValue read: inProtocol];
          [self setMessage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"postMessage_args"];
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRUCT fieldID: 1];
      [__message write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"postMessage_args("];
  [ms appendString: @"message:"];
  [ms appendFormat: @"%@", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface PostMessage_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation PostMessage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PostMessage_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PostMessage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ping_args : NSObject <TBase, NSCoding> {
  UserCredentials * __credentials;

  BOOL __credentials_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) UserCredentials * credentials;
#endif

- (id) init;
- (id) initWithCredentials: (UserCredentials *) credentials;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UserCredentials *) credentials;
- (void) setCredentials: (UserCredentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

@end

@implementation ping_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCredentials: (UserCredentials *) credentials
{
  self = [super init];
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
}

- (void) dealloc
{
  [__credentials release_stub];
  [super dealloc_stub];
}

- (UserCredentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (UserCredentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UserCredentials *fieldValue = [[UserCredentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 1];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ping_args("];
  [ms appendString: @"credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Ping_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation Ping_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Ping_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Ping_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MessagingClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_fetchMessages: (UserCredentials *) credentials
{
  [outProtocol writeMessageBeginWithName: @"fetchMessages" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"fetchMessages_args"];
  if (credentials != nil)  {
    [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 1];
    [credentials write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_fetchMessages
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  FetchMessages_result * result = [[[FetchMessages_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"fetchMessages failed: unknown result"];
}

- (NSMutableArray *) fetchMessages: (UserCredentials *) credentials
{
  [self send_fetchMessages : credentials];
  return [self recv_fetchMessages];
}

- (void) send_postMessage: (NewMessage *) message
{
  [outProtocol writeMessageBeginWithName: @"postMessage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"postMessage_args"];
  if (message != nil)  {
    [outProtocol writeFieldBeginWithName: @"message" type: TType_STRUCT fieldID: 1];
    [message write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_postMessage
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  PostMessage_result * result = [[[PostMessage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"postMessage failed: unknown result"];
}

- (BOOL) postMessage: (NewMessage *) message
{
  [self send_postMessage : message];
  return [self recv_postMessage];
}

- (void) send_ping: (UserCredentials *) credentials
{
  [outProtocol writeMessageBeginWithName: @"ping" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (credentials != nil)  {
    [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 1];
    [credentials write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_ping
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Ping_result * result = [[[Ping_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) ping: (UserCredentials *) credentials
{
  [self send_ping : credentials];
  [self recv_ping];
}

@end

@implementation MessagingProcessor

- (id) initWithMessaging: (id <Messaging>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_fetchMessages_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"fetchMessages"];
  }
  {
    SEL s = @selector(process_postMessage_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"postMessage"];
  }
  {
    SEL s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ping"];
  }
  return self;
}

- (id<Messaging>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_fetchMessages_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  fetchMessages_args * args = [[fetchMessages_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  FetchMessages_result * result = [[FetchMessages_result alloc] init];
  [result setSuccess: [mService fetchMessages: [args credentials]]];
  [outProtocol writeMessageBeginWithName: @"fetchMessages"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_postMessage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  postMessage_args * args = [[postMessage_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  PostMessage_result * result = [[PostMessage_result alloc] init];
  [result setSuccess: [mService postMessage: [args message]]];
  [outProtocol writeMessageBeginWithName: @"postMessage"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_ping_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ping_args * args = [[ping_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Ping_result * result = [[Ping_result alloc] init];
  [mService ping: [args credentials]];
  [outProtocol writeMessageBeginWithName: @"ping"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

